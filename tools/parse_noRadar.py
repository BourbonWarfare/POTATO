#!/usr/bin/env python3

# Author: PabstMirror
# Generates a config.cpp file with no-radar versions of all vehicles

rptLogfile = "vehDump.rpt"
 
def readClassesFromRPT():
    vehicles = []
    patches = []
 
    with open(rptLogfile, 'r') as f:
        for line in f.readlines():
            tokens = line.split("#~!~#")
            if len(tokens) < 2:
                continue
 
            if tokens[1] == "DumpedVehicle:":
                vehicles.append((tokens[2],float(tokens[3]), tokens[4], tokens[5]))

            if tokens[1] == "DumpedPatch:":
                patches.append(tokens[2])
 
    return (vehicles, patches)
 
def createConfig():
    vehicles, patches = readClassesFromRPT()
 
    with open('config.cpp', 'w') as f:
        f.write('#include "script_component.hpp"\n')
        f.write('\n')
        f.write('#ifndef POTATO_LEAN_CONFIGS\n')
        f.write('\n')
        f.write('//This file is auto-generated by parse_noRadar.py\n')
        f.write('\n')
        f.write('class CfgPatches {\n')
        f.write('    class ADDON {\n')
        f.write('        units[] = {')
        f.write(','.join(['"' + name + '"' for name, radar, dname, parent in vehicles]))
        f.write('};\n')
        f.write('        weapons[] = {};\n')
        f.write('        requiredVersion = REQUIRED_VERSION;\n')
        f.write('        requiredAddons[] = {"potato_core",')
        f.write(','.join(['"' + patch + '"' for patch in patches]))
        f.write('};\n')
        f.write('        author = "Potato";\n')
        f.write('        authorUrl = "https://github.com/BourbonWarfare/POTATO";\n')
        f.write('        VERSION_CONFIG;\n')
        f.write('    };\n')
        
        f.write('    class Pabst_NoRadar { //Dummy for BWC\n')
        f.write('        units[] = {};\n')
        f.write('        weapons[] = {};\n')
        f.write('        requiredVersion = REQUIRED_VERSION;\n')
        f.write('        requiredAddons[] = {};\n')
        f.write('        VERSION_CONFIG;\n')
        f.write('    };\n')
        f.write('};\n')
 
        f.write('class CfgVehicles {\n')
 
        declaredVehicles = []
 
        for name, radar, dname, parent in vehicles:
            if parent not in declaredVehicles:
                f.write('    class ' + parent + ';\n')
                declaredVehicles.append(parent)
 
            declaredVehicles.append(name)
 
            f.write('    class ' + name + ': ' + parent + ' {\n')
            f.write('        radarType = 8;\n')
            f.write('        displayName = "' + dname + '";\n')
            f.write('    };\n')

        f.write('};\n')
        f.write('\n')
        f.write('#endif\n')
 
 
if __name__ == '__main__':
    createConfig()
